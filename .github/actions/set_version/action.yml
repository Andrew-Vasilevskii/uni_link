name: 'Set version'
inputs:
  version:
    description: 'Version which should be used. If "current" is used the version in pubspec.yaml will be used.'
    required: true
    default: 'current'
  increase_build_number:
    description: 'If true the buildnumber will be increased by one.'
    required: true
  tag_prefix:
    description: 'Prefix which should be used for the tag.'
    required: true

description: 'increases the buildnumber by one if increase_build_number and set the version in pubspec, pushes, and tag the changes'
runs:
  using: 'composite'
  steps:
    - name: Validate increase_build_number
      id: validate-increase-build
      shell: bash
      env:
        VALUE: ${{ inputs.increase_build_number }}
      run: |
        if [[ "$VALUE" != "true" && "$VALUE" != "false" ]]; then
          echo "❌ Invalid value for increase_build_number: '$VALUE'. Must be 'true' or 'false'."
          exit 1
        fi

    - name: Trim version input
      id: trim-input
      shell: bash
      env:
        VERSION: ${{ inputs.version }}
      run: echo "trimmed_version=${VERSION// /}" >> $GITHUB_OUTPUT

    - name: Validate version
      shell: bash
      env:
        CURRENT_VALUE: 'current'
        TRIMMED_VERSION: ${{ steps.trim-input.outputs.trimmed_version }}
      run: |
        if [[ "$TRIMMED_VERSION" != $CURRENT_VALUE ]]; then
          if [[ ! "$TRIMMED_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid version: '$TRIMMED_VERSION'. Must be '$CURRENT_VALUE' or match 'x.y.z'"
            exit 1
          fi
        fi

    - name: Extract version
      id: extract-version
      shell: bash
      env:
        FILE: 'pubspec.yaml'
      run: |
        version_value=$(grep '^version:' "$FILE" | cut -d':' -f2 | tr -d ' ')
        version="${version_value%%+*}"
        build_number="${version_value##*+}"
        
        echo "current_version=$version" >> "$GITHUB_OUTPUT"
        echo "current_build=$build_number" >> "$GITHUB_OUTPUT"

    - name: Decide version bump
      id: bump
      shell: bash
      env:
        CURRENT_VALUE: 'current'
        INPUT_VERSION: ${{ inputs.version }}
        CURRENT_VERSION: ${{ steps.extract-version.outputs.current_version }}
        CURRENT_BUILD: ${{ steps.extract-version.outputs.current_build }}
        INCREASE_BUILD_NUMBER: ${{ inputs.increase_build_number }}
      run: |
        # Decide new version
        new_version="$INPUT_VERSION"
        if [ "$INPUT_VERSION" = $CURRENT_VALUE ]; then
          new_version="$CURRENT_VERSION"
        fi
        
        # Decide new build
        new_build="$CURRENT_BUILD"
        if $INCREASE_BUILD_NUMBER; then
          new_build=$((CURRENT_BUILD + 1))
        fi
        
        # Decide if anything changed
        if [ "$new_version" != "$CURRENT_VERSION" ] || [ "$new_build" != "$CURRENT_BUILD" ]; then
         should_change=true
        else
         should_change=false
        fi
        
        {
          echo "new_version=$new_version"
          echo "new_build_number=$new_build"
          echo "should_change=$should_change"
        } >> "$GITHUB_OUTPUT"

    - name: print
      shell: bash
      run: |
        echo ${{ steps.bump.new_version }}
        echo ${{ steps.bump.new_build_number }}
        echo ${{ steps.bump.should_change }}